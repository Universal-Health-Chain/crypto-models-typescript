import { AttachedSignatureDLT } from './proof.model';
import { AttachmentExternalDLT, CheckDetails, VerifierDLT } from './oidc4ida.common.model';
import { EvidenceCommonSubElementDLT, EvidenceDocumentDLT } from './oidc4ida.document.model';
import { EvidenceElectronicRecordDLT, IssuerElectronicRecordBase } from './oidc4ida.electronicRecord.model';
/** W3C Evidence for VCs can be generated by the API from some OpenID evidence stored on blockchain.
 *  See EBSI v2: https://ec.europa.eu/digital-building-blocks/wikis/display/EBSIDOC/Verifiable+Attestation
 *  - id: OPTIONAL. If present, it MUST contain a URL that points to where more information about this instance of evidence can be found (e.g.: urn:unid:uhc:vc:xyz or e.g.: "https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192dxyzab")
 *  - type: REQUIRED. Defines the evidence type, e.g.: ["DocumentVerification"], ["id_document"], ["utility_bill"], ["qes"]
 *  - verifier: REQUIRED. Defines entity that has verified documents before Verifiable Attestation issuance, e.g.: "https://example.edu/issuers/14"
 *  - evidenceDocument: REQUIRED. Defines document(s) which have been verified before Verifiable Attestation issuance, e.g.: "DriversLicense" (TODO: can be used HL7 instead?). QUESTION: Should it be the universal ID instead a description? RESPONSE: No, because it is linked to a credentialSubject within a credential
 *  - subjectPresence: REQUIRED. Defines if the Verifiable Attestation Subject was physically present in the course of the verification, e.g.: 'Physical' or 'Digital'
 *  - documentPresence:  REQUIRED. Defines how the document(s) which have been verified before Verifiable Credentials issuance have been provided, e.g.: 'Physical' or 'Digital'
 */
export interface EvidenceW3C {
    id?: string;
    type?: string[];
    verifier?: string;
    evidenceDocument?: string;
    subjectPresence?: string;
    documentPresence?: string;
}
/** Evidence is the certification of the authenticity of some (physical) document, (electronic) record, (electronic) signature, (utility) bill or vouch.
 * OpenID Connect for Identity Assurance 1.0: https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html
 * 5.1.1. Evidence Element - types of evidence:
 * - document: Verification based on any kind of physical or electronic document provided by the End-User.
 * - electronic_record: Verification based on data or information obtained electronically from an approved or recognized source.
 * - vouch: Verification based on an attestation or reference given by an approved or recognized person declaring they believe to the best of their knowledge that the Claim(s) are genuine and true.
 * - utility_bill: Verification based on a utility bill (this is to be deprecated in future releases and implementers are recommended to use the document type instead).
 * - electronic_signature: Verification based on an electronic signature.
 */
export type EvidenceObjectDLT = EvidenceElectronicRecordDLT | EvidenceDocumentDLT | EvidenceVouchDLT | EvidenceBillDLT | EvidenceElectronicSignatureDLT;
/**
 * If the OP (operator) issues a txn, it MUST maintain a corresponding audit trail.
 * Audit trail at least consists of the following details:
 * - the transaction id,
 * - the authentication methods employed, and
 * - the transaction type (e.g. scope values).
 *
 * OpenID 'method' values are:
 * pipp (Physical In-Person Proofing);
 * sripp (Supervised remote In-Person Proofing);
 * eid (Online verification of an electronic ID card);
 * uripp (Unsupervised remote in-person proofing with video capture of the ID document, user self-portrait video and liveness checks).
 * onsite (Electronically onsite reading the documentâ€™s chip using an authorization certificate and card access number).
 */
/** It may include all elements of the OpenID Connect address Claim. */
export interface IssuerElectronicRecordOpenID extends IssuerElectronicRecordBase {
    name?: string;
    formatted?: string;
    street_address?: string;
    locality?: string;
    postal_code?: string;
    jurisdiction?: string;
    country?: string;
}
/** OpenID 'vouch' evidence sub-element */
export interface EvidenceVouchBase {
    check_details?: CheckDetails[];
    time?: string;
    type: 'vouch';
    verifier?: VerifierDLT;
}
/** OpenID 'vouch' evidence sub-element */
export interface EvidenceVouchDLT extends EvidenceVouchBase {
    attachments?: AttachmentExternalDLT[];
    attestation?: VoucherAttestationDLT;
}
/** reference_number is the vouch ID,
 * personal_number is the holder.id (not for blockchain storage)
 * and writerId SHALL be mandatory on blockchain.
 */
export interface VoucherAttestationBase {
    type: string;
    date_of_issuance: string;
    date_of_expiry: string;
    reference_number?: string;
    personal_number?: string;
}
/** 'organization' SHOULD be a mandatory OrganizationId and occupation SHOULD be the PractitionerRoleId */
export interface VoucherIssuerDLT {
    occupation?: string;
    organization?: string;
}
/** 'voucher.organization' SHOULD be a mandatory OrganizationId and
 * 'voucher.occupation 'SHOULD be the PractitionerRoleId
 */
export interface VoucherAttestationDLT extends VoucherAttestationBase {
    voucher?: VoucherIssuerDLT;
}
/** OpenID 'utility_bill' evidence sub-element with 'method', 'time', 'type' and 'date' properties */
export interface EvidenceBillBase extends EvidenceCommonSubElementDLT {
    type: 'utility_bill';
    date?: string;
}
/** OpenID 'utility_bill' evidence sub-element.
 * 'issuerOrg' is the ID of the provider that issued the bill
 * and it can be converted to the 'provider' element by the API.
 * It also contains 'method', 'time', 'type', 'date' and external 'attachments' with 'digest.alg' and 'digest.value'.
 */
export interface EvidenceBillDLT extends EvidenceBillBase {
    issuerOrg: string;
    attachments?: AttachmentExternalDLT[];
}
/** OpenID 'electronic_signature' evidence sub-element
 * 'serial_number' can be the DID of the public key for doing the verification process instead of the serial number of a certificate.
 */
export interface EvidenceElectronicSignatureBase {
    type: 'electronic_signature';
    signature_type: string;
    issuer: string;
    serial_number: string;
    created_at: string;
}
/** OpenID 'electronic_signature' evidence sub-element
 * 'serial_number' can be the DID of the public key for doing the verification process instead of the serial number of a certificate.
 * It also contains 'type', 'signature_type', 'issuer', 'serial_number', 'created_at' and external 'attachments' with 'digest.alg' and 'digest.value'.
 */
export interface EvidenceElectronicSignatureDLT extends EvidenceElectronicSignatureBase {
    attachments?: AttachedSignatureDLT[];
}
/** The Evidence asset can store one evidence per each type; the API can convert them to an array of OpenID Evidences.
 * 'typeHL7' can be 'NNESP', 'DL', etc. and it is the W3C's 'evidenceDocument' property.
 * 'typeOpenID' contains OpenID Evidence types, e.g.: ["document"], ["utility_bill"], ["electronic_signature"] instead of ["DocumentVerification"].
 */
/** The Evidence asset can store one evidence per each type; the API can convert them to an array of OpenID Evidences.
 * 'typeHL7' can be 'NNESP', 'DL', etc. and it is the W3C's 'evidenceDocument' property.
 * 'typeOpenID' contains OpenID Evidence types, e.g.: ["document"], ["utility_bill"], ["electronic_signature"] instead of ["DocumentVerification"].
 */
