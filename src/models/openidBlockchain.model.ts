/* Copyright (c) ConnectHealth Group (Conéctate Soluciones y Aplicaciones SL, Connecting Solutions & Applications Ltd.) */
/* Apache License 2.0 */

// import { Holder } from './CredentialModel';
import { AttachedSignatureDLT } from './proof.model';
import { AttachmentExternalDLT, CheckDetails, VerifierDLT } from './oidc4ida.common.model';
import { EvidenceCommonSubElementDLT, EvidenceDocumentDLT } from './oidc4ida.document.model';
import { EvidenceElectronicRecordDLT, IssuerElectronicRecordBase } from './oidc4ida.electronicRecord.model';

// NOTE: evidence.verifier.txn is the blockchain's Tx ID certification in Base58 format

/** W3C Evidence for VCs can be generated by the API from some OpenID evidence stored on blockchain.
 *  See EBSI v2: https://ec.europa.eu/digital-building-blocks/wikis/display/EBSIDOC/Verifiable+Attestation
 *  - id: OPTIONAL. If present, it MUST contain a URL that points to where more information about this instance of evidence can be found (e.g.: urn:unid:uhc:vc:xyz or e.g.: "https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192dxyzab")
 *  - type: REQUIRED. Defines the evidence type, e.g.: ["DocumentVerification"], ["id_document"], ["utility_bill"], ["qes"]
 *  - verifier: REQUIRED. Defines entity that has verified documents before Verifiable Attestation issuance, e.g.: "https://example.edu/issuers/14"
 *  - evidenceDocument: REQUIRED. Defines document(s) which have been verified before Verifiable Attestation issuance, e.g.: "DriversLicense" (TODO: can be used HL7 instead?). QUESTION: Should it be the universal ID instead a description? RESPONSE: No, because it is linked to a credentialSubject within a credential
 *  - subjectPresence: REQUIRED. Defines if the Verifiable Attestation Subject was physically present in the course of the verification, e.g.: 'Physical' or 'Digital'
 *  - documentPresence:  REQUIRED. Defines how the document(s) which have been verified before Verifiable Credentials issuance have been provided, e.g.: 'Physical' or 'Digital'
 */
export interface EvidenceW3C {
    id?:                string;
    type?:              string[];
    verifier?:          string;
    evidenceDocument?:  string;
    subjectPresence?:   string;
    documentPresence?:  string;
}

/** Evidence is the certification of the authenticity of some (physical) document, (electronic) record, (electronic) signature, (utility) bill or vouch.
 * OpenID Connect for Identity Assurance 1.0: https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html
 * 5.1.1. Evidence Element - types of evidence:
 * - document: Verification based on any kind of physical or electronic document provided by the End-User.
 * - electronic_record: Verification based on data or information obtained electronically from an approved or recognized source.
 * - vouch: Verification based on an attestation or reference given by an approved or recognized person declaring they believe to the best of their knowledge that the Claim(s) are genuine and true.
 * - utility_bill: Verification based on a utility bill (this is to be deprecated in future releases and implementers are recommended to use the document type instead).
 * - electronic_signature: Verification based on an electronic signature.
 */
export type EvidenceObjectDLT =
    EvidenceElectronicRecordDLT     // e.g.: VC, SHC, DGC, FHIR record, etc.
    | EvidenceDocumentDLT           // e.g.: evidence of a physical document
    | EvidenceVouchDLT
    | EvidenceBillDLT
    | EvidenceElectronicSignatureDLT;


/**
 * If the OP (operator) issues a txn, it MUST maintain a corresponding audit trail.
 * Audit trail at least consists of the following details:
 * - the transaction id,
 * - the authentication methods employed, and
 * - the transaction type (e.g. scope values).
 *
 * OpenID 'method' values are:
 * pipp (Physical In-Person Proofing);
 * sripp (Supervised remote In-Person Proofing);
 * eid (Online verification of an electronic ID card);
 * uripp (Unsupervised remote in-person proofing with video capture of the ID document, user self-portrait video and liveness checks).
 * onsite (Electronically onsite reading the document’s chip using an authorization certificate and card access number).
 */

// TODO: IssuerElectronicRecordOpenID with personal_number
/** It may include all elements of the OpenID Connect address Claim. */
export interface IssuerElectronicRecordOpenID extends
    IssuerElectronicRecordBase
{
    name?:              string; // instead of blockchain's id and type.
    formatted?:         string; // Full mailing address.
    street_address?:    string; // MAY include house number, street name, Post Office Box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair ("\r\n") or as a single line feed character ("\n")
    locality?:          string; // City or locality component.
    postal_code?:       string; // Zip code or postal code component.
    jurisdiction?:      string;
    country?:           string; // Country name from 'country_code' ISO.
}

/** OpenID 'vouch' evidence sub-element */
export interface EvidenceVouchBase {
    check_details?: CheckDetails[];    // OPTIONAL. Checks done in relation to the evidence. https://bitbucket.org/openid/ekyc-ida/wiki/identifiers
    time?:          string;                 // OPTIONAL. Time stamp in ISO 8601:2004 [ISO8601-2004] YYYY-MM-DDThh:mm[:ss]TZD format representing the date when it was verified
    type:           'vouch';                // REQUIRED. Value MUST be set to 'vouch'.
    verifier?:       VerifierDLT;           // OPTIONAL. Object denoting the legal entity that performed the identity verification on behalf of the OP.
}

/** OpenID 'vouch' evidence sub-element */
export interface EvidenceVouchDLT extends
    EvidenceVouchBase   // type, validation_method, verification_method, verifier, time
{
    attachments?:   AttachmentExternalDLT[];    // OPTIONAL. Array of JSON objects representing attachments like photocopies of documents or certificates.
    attestation?:   VoucherAttestationDLT;      // OPTIONAL. Object representing the attestation that is the basis of the vouch.
}

/** reference_number is the vouch ID,
 * personal_number is the holder.id (not for blockchain storage)
 * and writerId SHALL be mandatory on blockchain.
 */
 export interface VoucherAttestationBase {
    type:               string; // REQUIRED. Type of vouch. See https://bitbucket.org/openid/ekyc-ida/wiki/identifiers
    date_of_issuance:   string; // REQUIRED. If this attribute exists for the particular type of document. The date the document was issued as ISO 8601:2004 YYYY-MM-DD format.
    date_of_expiry:     string; // REQUIRED. If this attribute exists for the particular type of document. The date the document will expire as ISO 8601:2004 YYYY-MM-DD format.
    reference_number?:  string; // OPTIONAL. Vouch ID.
    personal_number?:   string; // OPTIONAL. holder.id or subjecId (in OpenID it can be a national identification number, personal identity number, citizen number, social security number, driver number, account number, customer number, licensee number, etc.)
}

/** 'organization' SHOULD be a mandatory OrganizationId and occupation SHOULD be the PractitionerRoleId */
export interface VoucherIssuerDLT {
    occupation?:    string; // OPTIONAL. Occupation or other authority of the person giving the vouch/reference.
    organization?:  string; // OPTIONAL. Name of the organization the voucher is representing
}

/** 'voucher.organization' SHOULD be a mandatory OrganizationId and
 * 'voucher.occupation 'SHOULD be the PractitionerRoleId
 */
export interface VoucherAttestationDLT extends
    VoucherAttestationBase  // type, date_of_issuance, date_of_expiry, reference_number
{
    voucher?:   VoucherIssuerDLT;   // OPTIONAL. Object containing information about the entity giving the vouch. This object consists of the following properties:
}

/** OpenID 'utility_bill' evidence sub-element with 'method', 'time', 'type' and 'date' properties */
export interface EvidenceBillBase extends
    EvidenceCommonSubElementDLT  // method, time
{
    type:           'utility_bill';             // REQUIRED: fixed to 'utility_bill'.
    // provider:    ProviderOpenID;             // REQUIRED: object identifying the respective provider that issued the bill.
    date?:          string;                     // date when this bill was issued: ISO 8601:2004 YYYY-MM-DD formatted string.
}

/** OpenID 'utility_bill' evidence sub-element.
 * 'issuerOrg' is the ID of the provider that issued the bill
 * and it can be converted to the 'provider' element by the API.
 * It also contains 'method', 'time', 'type', 'date' and external 'attachments' with 'digest.alg' and 'digest.value'.
 */
export interface EvidenceBillDLT extends
    EvidenceBillBase  // 'method', 'time', 'type', 'date' and external 'attachments' with 'digest.alg' and 'digest.value'
{
    // provider:    ProviderOpenID;             // REQUIRED: object identifying the respective provider that issued the bill.
    issuerOrg:      string;                     // REQUIRED: ID of the provider that issued the bill.
    attachments?:   AttachmentExternalDLT[];    // OPTIONAL. Array of JSON objects representing attachments like photocopies of documents or certificates.
}

/** OpenID 'electronic_signature' evidence sub-element
 * 'serial_number' can be the DID of the public key for doing the verification process instead of the serial number of a certificate.
 */
export interface EvidenceElectronicSignatureBase{
    type:           'electronic_signature'; // REQUIRED: Fixed to 'electronic_signature'
    signature_type: string;                 // REQUIRED. Type of signature used as evidence. The value range might be restricted by the respective trust framework.
    issuer:         string;                 // REQUIRED. Certification authority that issued the signer's certificate.
    serial_number:  string;                 // REQUIRED. DID#KID or Serial number of the certificate used to sign.
    created_at:     string;                 // REQUIRED. The time the signature was created as ISO 8601:2004 YYYY-MM-DDThh:mm:ss±hh format
}

/** OpenID 'electronic_signature' evidence sub-element
 * 'serial_number' can be the DID of the public key for doing the verification process instead of the serial number of a certificate.
 * It also contains 'type', 'signature_type', 'issuer', 'serial_number', 'created_at' and external 'attachments' with 'digest.alg' and 'digest.value'.
 */
export interface EvidenceElectronicSignatureDLT extends
    EvidenceElectronicSignatureBase // 'type', 'signature_type', 'issuer', 'serial_number', 'created_at'
{
    attachments?:   AttachedSignatureDLT[];   // OPTIONAL. Array of JSON objects containing signatures, e.g. 'jws' or 'Ed25519' signature types.
}

/*
export interface EvidenceAsset extends 
    VerificationCommon
{
    evidence: any;
    meta: {
        did: string;
        digest: DigestResultOpenIdData;
        txn: string;
    }
}*/

// ------------------------


/** The Evidence asset can store one evidence per each type; the API can convert them to an array of OpenID Evidences.
 * 'typeHL7' can be 'NNESP', 'DL', etc. and it is the W3C's 'evidenceDocument' property.
 * 'typeOpenID' contains OpenID Evidence types, e.g.: ["document"], ["utility_bill"], ["electronic_signature"] instead of ["DocumentVerification"].
 */
/*
 export interface EvidenceUHC extends
 EvidenceAssetOnDLT
{
 id?:    string; // the evidence id is not stored within the asset because the blockchain stores it internally
}
*/

/** The Evidence asset can store one evidence per each type; the API can convert them to an array of OpenID Evidences.
 * 'typeHL7' can be 'NNESP', 'DL', etc. and it is the W3C's 'evidenceDocument' property.
 * 'typeOpenID' contains OpenID Evidence types, e.g.: ["document"], ["utility_bill"], ["electronic_signature"] instead of ["DocumentVerification"].
 */
/*
export interface EvidenceAssetOnDLT extends
    EvidenceVerificationBase,    // trust_framework, assurance_level, assurance_process, time, verification_process
    CertificationDLT           // 'canAlg', 'holder', 'issuerOrg', 'typeHL7', 'time' and 'writerDID' or 'writer' (with id and type).
{
 // documentPresence?:   string; // It is the same as the Voucher Attestation 'type' property ('written_attestation' or 'digital_attestation') or Document / Bill 'method' property (pipp, sripp, eid, uripp), instead of simply 'Physical' or 'Digital'
 // evidence:            EvidenceObjectDLT   // instead of an array it is a concrete evidence
 evidence: {
     eRecord?:   EvidenceElectronicRecordDLT     // e.g.: VC, SHC, DGC, FHIR record, etc., it has 'type', 'validation_method', 'verification_method', 'verifier', 'time'
     doc?:       EvidenceDocumentDLT             // (physical) document does not have attachments. It has 'document_details' ('issuer', 'type', 'date_of_issuance', 'date_of_expiry', 'document_number', 'serial_number' as model of the document) and 'type', 'issuer', 'country', 'validFrom', 'validUntil'
     vouch?:     EvidenceVouchDLT
     bill?:      EvidenceBillDLT                 // providerId and date when the bill was issued
     eSign?:     EvidenceElectronicSignatureDLT  // this is a proof?
 };
}*/